0001   0000             ;***************************************************************************
0002   0000             ;  PROGRAM:			Z80 Monitor
0003   0000             ;  PURPOSE:			ROM Monitor Program
0004   0000             ;  ASSEMBLER:			TASM 3.2
0005   0000             ;  LICENSE:			The MIT License
0006   0000             ;  AUTHOR : MCook		Michael Anderson
0007   0000             ; CREATE DATE : 22 APR 19
0008   0000             ;***************************************************************************
0009   0000             
0010   0000             ; Assemble with TASM 3.2 with the following command lines.
0011   0000             ; Use the format appropriate for your EPROM programmer.
0012   0000             
0013   0000             ; For Intel HEX format output plus list file:
0014   0000             ; tasm -80 -g0 -la -h z80_monitor.asm z80_monitor.hex
0015   0000             
0016   0000             ; For binary (.bin) format output plus list file:
0017   0000             ; tasm -80 -g3 -la -h z80_monitor.asm z80_monitor.bin
0018   0000             
0019   0000             ROM_BOTTOM:	.EQU	$0000		;Bottom address of ROM
0020   0000             ROM_TOP:	.EQU	$07FF		;Top address of ROM
0021   0000             RAM_BOTTOM:	.EQU	$8000		;Bottom address of RAM
0022   0000             RAM_TOP:	.EQU	$FFFF		;Top address of RAM
0023   0000             
0024   0000             EOS:	.EQU	$FF			;End of string
0025   0000             
0026   0000             	.ORG $0000
0027   0000             
0028   0000             START:
0029   0000 F3          	DI			;Disable interrupts
0030   0001 C3 00 01    	JP	MAIN		;Jump to the MAIN routine
0031   0004             
0032   0038             	.ORG	$0038
0033   0038             
0034   0038             INT_CATCH:
0035   0038 C3 38 00    	JP	INT_CATCH	;INF loop to catch interrupts (not enabled)
0036   003B             
0037   0066             	.ORG $0066
0038   0066             
0039   0066             NMI_CATCH:
0040   0066 C3 66 00    	JP	NMI_CATCH	;INF loop to catch interrupts (not enabled)
0041   0069             
0042   0100             .ORG $0100
0043   0100             ;***************************************************************************
0044   0100             ;MAIN
0045   0100             ;Function: Entrance to user program
0046   0100             ;***************************************************************************
0047   0100             MAIN:
0048   0100 31 FF FF    	LD	SP,RAM_TOP		;Load the stack pointer for stack operations.
0049   0103 CD BA 01    	CALL	UART_INIT		;Initialize UART
0050   0106 CD 75 01    	CALL	PRINT_MON_HDR		;Print the monitor header info
0051   0109 CD 8D 01    	CALL	MON_PROMPT_LOOP		;Monitor user prompt loop
0052   010C 76          	HALT
0053   010D             
0054   010D             ;***************************************************************************
0055   010D             ;CLEAR_SCREEN
0056   010D             ;Function: Clears terminal screen
0057   010D             ;***************************************************************************
0058   010D 0C FF       MON_CLS: .BYTE "\f",EOS  	;Escape sequence for CLS. (aka form feed)
0059   010F             
0060   010F             CLEAR_SCREEN:
0061   010F 21 0D 01    	LD	HL,MON_CLS
0062   0112 CD 5B 03    	CALL	PRINT_STRING
0063   0115 C9          	RET
0064   0116             
0065   0116             ;***************************************************************************
0066   0116             ;RESET_COMMAND
0067   0116             ;Function: Software Reset to $0000
0068   0116             ;***************************************************************************
0069   0116             RESET_COMMAND:
0070   0116 C3 00 00    	JP START	;Simply restarts
0071   0119             
0072   0119             ;***************************************************************************
0073   0119             ;PRINT_MON_HDR
0074   0119             ;Function: Print out program header info
0075   0119             ;***************************************************************************
0076   0119 0D 0A 5A 38 MON_MSG: .BYTE "\r\nZ80 Computer\t\t2019 Michael Anderson\r\n\r\n",EOS
0076   011D 30 20 43 6F 
0076   0121 6D 70 75 74 
0076   0125 65 72 09 09 
0076   0129 32 30 31 39 
0076   012D 20 4D 69 63 
0076   0131 68 61 65 6C 
0076   0135 20 41 6E 64 
0076   0139 65 72 73 6F 
0076   013D 6E 0D 0A 0D 
0076   0141 0A FF 
0077   0143 52 4F 4D 20 MON_VER: .BYTE "ROM Monitor v0.1\r\n\r\n",EOS
0077   0147 4D 6F 6E 69 
0077   014B 74 6F 72 20 
0077   014F 76 30 2E 31 
0077   0153 0D 0A 0D 0A 
0077   0157 FF 
0078   0158 09 20 49 6E MON_HLP: .BYTE "\t Input ? for command list\r\n",EOS
0078   015C 70 75 74 20 
0078   0160 3F 20 66 6F 
0078   0164 72 20 63 6F 
0078   0168 6D 6D 61 6E 
0078   016C 64 20 6C 69 
0078   0170 73 74 0D 0A 
0078   0174 FF 
0079   0175             
0080   0175             PRINT_MON_HDR:
0081   0175 CD 0F 01    	CALL	CLEAR_SCREEN	;Clear the terminal screen
0082   0178 21 19 01    	LD	HL,MON_MSG	;Print some messages
0083   017B CD 5B 03    	CALL	PRINT_STRING
0084   017E 21 43 01    	LD	HL,MON_VER
0085   0181 CD 5B 03    	CALL	PRINT_STRING
0086   0184 21 58 01    	LD	HL,MON_HLP
0087   0187 CD 5B 03    	CALL	PRINT_STRING
0088   018A C9          		RET
0089   018B             
0090   018B             ;***************************************************************************
0091   018B             ;MON_PROMPT
0092   018B             ;Function: Prompt user for input
0093   018B             ;***************************************************************************
0094   018B 3E FF       MON_PROMPT: .BYTE ">",EOS
0095   018D             
0096   018D             MON_PROMPT_LOOP:
0097   018D 21 8B 01    	LD	HL,MON_PROMPT	;Print monitor prompt
0098   0190 CD 5B 03    	CALL	PRINT_STRING
0099   0193 CD 5F 03    	CALL	GET_CHAR	;Get a character from user into Acc
0100   0196 CD 66 03    	CALL	PRINT_CHAR
0101   0199 CD 76 03    	CALL	PRINT_NEW_LINE		;Print a new line
0102   019C CD A5 01    	CALL	MON_COMMAND		;Respond to user input
0103   019F CD 76 03    	CALL	PRINT_NEW_LINE		;Print a new line
0104   01A2 C3 8D 01    	JP	MON_PROMPT_LOOP
0105   01A5             
0106   01A5             ;***************************************************************************
0107   01A5             ;MON_COMMAND
0108   01A5             ;Function: User input in accumulator to respond to
0109   01A5             ;***************************************************************************
0110   01A5             MON_COMMAND:
0111   01A5 FE 3F       	CP	'?'
0112   01A7 CC 89 02    	CALL	Z,HELP_COMMAND
0113   01AA FE 44       	CP	'D'
0114   01AC CC 19 03    	CALL	Z,MEMORY_DUMP_COMMAND
0115   01AF FE 43       	CP	'C'
0116   01B1 CC 0F 01    	CALL	Z,CLEAR_SCREEN
0117   01B4 FE 52       	CP	'R'
0118   01B6 CC 16 01    	CALL	Z,RESET_COMMAND
0119   01B9 C9          	RET
0120   01BA             
0121   01BA             ;***************************************************************************
0122   01BA             ;  PROGRAM:			UARTDriver
0123   01BA             ;  PURPOSE:			Subroutines for a 16550 UART
0124   01BA             ;  ASSEMBLER:			TASM 3.2
0125   01BA             ;  LICENSE:			The MIT License
0126   01BA             ;  AUTHOR : MCook		Michael Anderson
0127   01BA             ;  CREATE DATE :	22APR19
0128   01BA             ;***************************************************************************
0129   01BA             
0130   01BA             ;The eight addresses that the 16550 resides in I/O space.
0131   01BA             ;Change to suit hardware.
0132   01BA             UART0:       .EQU    $10				;Data in/out
0133   01BA             UART1:       .EQU    $11            	;Check RX
0134   01BA             UART2:       .EQU    $12            	;Interrupts
0135   01BA             UART3:       .EQU    $13            	;Line control
0136   01BA             UART4:       .EQU    $14            	;Modem control
0137   01BA             UART5:       .EQU    $15            	;Line status
0138   01BA             UART6:       .EQU    $16            	;Modem status
0139   01BA             UART7:       .EQU    $17            	;Scratch register
0140   01BA             
0141   01BA             ;***************************************************************************
0142   01BA             ;UART_INIT
0143   01BA             ;Function: Initialize the UART to BAUD Rate 9600 (4.9152 MHz clock input)
0144   01BA             ;***************************************************************************
0145   01BA             UART_INIT:
0146   01BA 3E 80       	LD	A,$80			;Mask to Set DLAB Flag
0147   01BC D3 13       	OUT	(UART3),A
0148   01BE 3E 20       	LD 	A,32			;Divisor = 32 @ 9600bps w/ 4.9152 Mhz
0149   01C0 D3 10       	OUT	(UART0),A		;Set BAUD rate to 9600
0150   01C2 3E 00       	LD	A,00
0151   01C4 D3 11       	OUT	(UART1),A		;Set BAUD rate to 9600
0152   01C6 3E 03       	LD	A,$03
0153   01C8 D3 13       	OUT	(UART3),A		;Set 8-bit data, 1 stop bit, reset DLAB Flag
0154   01CA 3E 01       	LD	A,$01
0155   01CC D3 11       	OUT	(UART1),A		;Enable receive data available interrupt only
0156   01CE C9          	RET
0157   01CF             
0158   01CF             ;***************************************************************************
0159   01CF             ;UART_PRNT_STR:
0160   01CF             ;Function: Print out string starting at MEM location (HL) to 16550 UART
0161   01CF             ;***************************************************************************
0162   01CF             UART_PRNT_STR:
0163   01CF F5          	PUSH	AF
0164   01D0             UART_PRNT_STR_LP:
0165   01D0 7E          	LD	A,(HL)
0166   01D1 FE FF       	CP	EOS			;Test for end byte
0167   01D3 CA DD 01    	JP	Z,UART_END_PRNT_STR	;Jump if end byte is found
0168   01D6 CD E9 01    	CALL	UART_TX
0169   01D9 23          	INC	HL			;Increment pointer to next char
0170   01DA C3 D0 01    	JP	UART_PRNT_STR_LP	;Transmit loop
0171   01DD             UART_END_PRNT_STR:
0172   01DD F1          	POP	AF
0173   01DE C9          	RET
0174   01DF             
0175   01DF             ;***************************************************************************
0176   01DF             ;UART_TX_READY
0177   01DF             ;Function: Check if UART is ready to transmit
0178   01DF             ;***************************************************************************
0179   01DF             UART_TX_RDY:
0180   01DF F5          	PUSH	AF
0181   01E0             UART_TX_RDY_LP:
0182   01E0 DB 15       	IN	A,(UART5)		;Fetch the control register
0183   01E2 CB 6F       	BIT	5,A			;Bit will be set if UART is ready to send
0184   01E4 CA E0 01    	JP	Z,UART_TX_RDY_LP
0185   01E7 F1          	POP	AF
0186   01E8 C9          	RET
0187   01E9             
0188   01E9             ;***************************************************************************
0189   01E9             ;UART_TX
0190   01E9             ;Function: Transmit character in A to UART
0191   01E9             ;***************************************************************************
0192   01E9             UART_TX:
0193   01E9 CD DF 01    	CALL	UART_TX_RDY		;Make sure UART is ready to receive
0194   01EC D3 10       	OUT	(UART0),A		;Transmit character in A to UART
0195   01EE C9          	RET
0196   01EF             
0197   01EF             ;***************************************************************************
0198   01EF             ;UART_RX_READY
0199   01EF             ;Function: Check if UART is ready to receive
0200   01EF             ;***************************************************************************
0201   01EF             UART_RX_RDY:
0202   01EF F5          	PUSH	AF
0203   01F0             UART_RX_RDY_LP:
0204   01F0 DB 15       	IN	A,(UART5)		;Fetch the control register
0205   01F2 CB 47       	BIT	0,A		;Bit will be set if UART is ready to receive
0206   01F4 CA F0 01    	JP	Z,UART_RX_RDY_LP
0207   01F7 F1          	POP	AF
0208   01F8 C9          	RET
0209   01F9             
0210   01F9             ;***************************************************************************
0211   01F9             ;UART_RX
0212   01F9             ;Function: Receive character in UART to A
0213   01F9             ;***************************************************************************
0214   01F9             UART_RX:
0215   01F9 CD EF 01    	CALL	UART_RX_RDY		;Make sure UART is ready to receive
0216   01FC DB 10       	IN	A,(UART0)		;Receive character in UART to A
0217   01FE C9          	RET
0218   01FF             
0219   01FF             ;***************************************************************************
0220   01FF             ;  PROGRAM:			MONCommands
0221   01FF             ;  PURPOSE:			Subroutines for all monitor commands
0222   01FF             ;  ASSEMBLER:			TASM 3.2
0223   01FF             ;  LICENSE:			The MIT License
0224   01FF             ;  AUTHOR : MCook		Michael Anderson
0225   01FF             ;  CREATE DATE :	22 APR 19
0226   01FF             ;***************************************************************************
0227   01FF             
0228   01FF             ;***************************************************************************
0229   01FF             ;HELP_COMMAND
0230   01FF             ;Function: Print help dialogue box
0231   01FF             ;***************************************************************************
0232   01FF 5A 4D 43 38 HELP_MSG_1:	.BYTE "ZMC80 Monitor Command List\r\n",EOS
0232   0203 30 20 4D 6F 
0232   0207 6E 69 74 6F 
0232   020B 72 20 43 6F 
0232   020F 6D 6D 61 6E 
0232   0213 64 20 4C 69 
0232   0217 73 74 0D 0A 
0232   021B FF 
0233   021C 3F 20 2D 20 HELP_MSG_2:	.BYTE "? - view command list\r\n",EOS
0233   0220 76 69 65 77 
0233   0224 20 63 6F 6D 
0233   0228 6D 61 6E 64 
0233   022C 20 6C 69 73 
0233   0230 74 0D 0A FF 
0234   0234 52 20 2D 20 HELP_MSG_3:	.BYTE "R - monitor reset\r\n",EOS
0234   0238 6D 6F 6E 69 
0234   023C 74 6F 72 20 
0234   0240 72 65 73 65 
0234   0244 74 0D 0A FF 
0235   0248 43 20 2D 20 HELP_MSG_4:	.BYTE "C - clear screen\r\n",EOS
0235   024C 63 6C 65 61 
0235   0250 72 20 73 63 
0235   0254 72 65 65 6E 
0235   0258 0D 0A FF 
0236   025B 44 20 2D 20 HELP_MSG_5:	.BYTE "D - print $80 bytes from specified location\r\n",EOS
0236   025F 70 72 69 6E 
0236   0263 74 20 24 38 
0236   0267 30 20 62 79 
0236   026B 74 65 73 20 
0236   026F 66 72 6F 6D 
0236   0273 20 73 70 65 
0236   0277 63 69 66 69 
0236   027B 65 64 20 6C 
0236   027F 6F 63 61 74 
0236   0283 69 6F 6E 0D 
0236   0287 0A FF 
0237   0289             
0238   0289             HELP_COMMAND:
0239   0289 21 FF 01    	LD	HL,HELP_MSG_1	;Print some messages
0240   028C CD 5B 03    	CALL	PRINT_STRING
0241   028F 21 1C 02    	LD	HL,HELP_MSG_2
0242   0292 CD 5B 03    	CALL	PRINT_STRING
0243   0295 21 34 02    	LD	HL,HELP_MSG_3
0244   0298 CD 5B 03    	CALL	PRINT_STRING
0245   029B 21 48 02    	LD	HL,HELP_MSG_4
0246   029E CD 5B 03    	CALL	PRINT_STRING
0247   02A1 21 5B 02    	LD	HL,HELP_MSG_5
0248   02A4 CD 5B 03    	CALL	PRINT_STRING
0249   02A7 3E FF       	LD	A,$FF		;Load $FF into Acc so MON_COMMAND finishes
0250   02A9 C9          	RET
0251   02AA             
0252   02AA             ;***************************************************************************
0253   02AA             ;MEMORY_DUMP_COMMAND
0254   02AA             ;Function: Print $80 databytes from specified location
0255   02AA             ;***************************************************************************
0256   02AA 4D 65 6D 6F MDC_1: .BYTE "Memory Dump Command\r\n",EOS
0256   02AE 72 79 20 44 
0256   02B2 75 6D 70 20 
0256   02B6 43 6F 6D 6D 
0256   02BA 61 6E 64 0D 
0256   02BE 0A FF 
0257   02C0 4C 6F 63 61 MDC_2: .BYTE "Location to start in 4 digit HEX:",EOS
0257   02C4 74 69 6F 6E 
0257   02C8 20 74 6F 20 
0257   02CC 73 74 61 72 
0257   02D0 74 20 69 6E 
0257   02D4 20 34 20 64 
0257   02D8 69 67 69 74 
0257   02DC 20 48 45 58 
0257   02E0 3A FF 
0258   02E2 20 20 20 20 MDC_3: .BYTE "     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\r\n",EOS
0258   02E6 20 30 30 20 
0258   02EA 30 31 20 30 
0258   02EE 32 20 30 33 
0258   02F2 20 30 34 20 
0258   02F6 30 35 20 30 
0258   02FA 36 20 30 37 
0258   02FE 20 30 38 20 
0258   0302 30 39 20 30 
0258   0306 41 20 30 42 
0258   030A 20 30 43 20 
0258   030E 30 44 20 30 
0258   0312 45 20 30 46 
0258   0316 0D 0A FF 
0259   0319             
0260   0319             MEMORY_DUMP_COMMAND:
0261   0319 21 AA 02    	LD	HL,MDC_1	;Print some messages
0262   031C CD 5B 03    	CALL	PRINT_STRING
0263   031F 21 C0 02    	LD	HL,MDC_2
0264   0322 CD 5B 03    	CALL	PRINT_STRING
0265   0325 CD BE 03    	CALL	GET_HEX_WORD	;HL now points to databyte location
0266   0328 E5          	PUSH	HL		;Save HL that holds databyte location on stack
0267   0329 CD 76 03    	CALL	PRINT_NEW_LINE	;Print some messages
0268   032C CD 76 03    	CALL	PRINT_NEW_LINE
0269   032F 21 E2 02    	LD	HL,MDC_3
0270   0332 CD 5B 03    	CALL	PRINT_STRING
0271   0335 CD 76 03    	CALL	PRINT_NEW_LINE
0272   0338 E1          	POP	HL	;Restore HL that holds databyte location on stack
0273   0339 0E 0A       	LD	C,10	;Register C holds counter of dump lines to print
0274   033B             MEMORY_DUMP_LINE:
0275   033B 06 10       	LD		B,16	;Register B holds counter of dump bytes to print
0276   033D CD EB 03    	CALL	PRINT_HEX_WORD	;Print dump line address in hex form
0277   0340 3E 20       	LD	A,' '		;Print spacer
0278   0342 CD 66 03    	CALL	PRINT_CHAR
0279   0345 0D          	DEC	C	;Decrement C to keep track of number of lines printed
0280   0346             MEMORY_DUMP_BYTES:
0281   0346 7E          	LD	A,(HL)		;Load Acc with databyte HL points to
0282   0347 CD DA 03    	CALL	PRINT_HEX_BYTE	;Print databyte in HEX form
0283   034A 3E 20       	LD	A,' '		;Print spacer
0284   034C CD 66 03    	CALL	PRINT_CHAR
0285   034F 23          	INC	HL		;Increase HL to next address pointer
0286   0350 10 F4       	DJNZ	MEMORY_DUMP_BYTES	;Print 16 bytes out since B holds 16
0287   0352 41          	LD	B,C		;Load B with C to keep track of number of lines printed
0288   0353 CD 76 03    	CALL	PRINT_NEW_LINE		;Get ready for next dump line
0289   0356 10 E3       	DJNZ	MEMORY_DUMP_LINE	;Print 10 line out since C holds 10 and we load B with C
0290   0358 3E FF       	LD	A,$FF	;Load $FF into Acc so MON_COMMAND finishes
0291   035A C9          	RET
0292   035B             
0293   035B             ;***************************************************************************
0294   035B             ;  PROGRAM:			CONIO
0295   035B             ;  PURPOSE:			Subroutines for console I/O
0296   035B             ;  ASSEMBLER:			TASM 3.2
0297   035B             ;  LICENSE:			The MIT License
0298   035B             ;  AUTHOR : MCook		Michael Anderson
0299   035B             ;  CREATE DATE :	22 APR 19
0300   035B             ;***************************************************************************
0301   035B             
0302   035B             ;***************************************************************************
0303   035B             ;PRINT_STRING
0304   035B             ;Function: Prints string to terminal program
0305   035B             ;***************************************************************************
0306   035B             PRINT_STRING:
0307   035B CD CF 01    	CALL	UART_PRNT_STR
0308   035E C9          	RET
0309   035F             
0310   035F             ;***************************************************************************
0311   035F             ;GET_CHAR
0312   035F             ;Function: Get upper case ASCII character from user into Accumulator
0313   035F             ;***************************************************************************
0314   035F             GET_CHAR:
0315   035F CD F9 01    	CALL	UART_RX		;Get char into Acc
0316   0362 CD 6A 03    	CALL	TO_UPPER	;Character has to be upper case
0317   0365 C9          	RET
0318   0366             
0319   0366             ;***************************************************************************
0320   0366             ;PRINT_CHAR
0321   0366             ;Function: Get upper case ASCII character from Accumulator to UART
0322   0366             ;***************************************************************************
0323   0366             PRINT_CHAR:
0324   0366 CD E9 01    	CALL	UART_TX		;Echo character to terminal
0325   0369 C9          	RET
0326   036A             
0327   036A             ;***************************************************************************
0328   036A             ;TO_UPPER
0329   036A             ;Function: Convert character in Accumulator to upper case
0330   036A             ;***************************************************************************
0331   036A             TO_UPPER:
0332   036A FE 61       	CP	'a'	; Nothing to do if not lower case
0333   036C D8          	RET	C
0334   036D FE 7B       	CP	'z' + 1		; > 'z'?
0335   036F D0          	RET	NC		; Nothing to do, either
0336   0370 E6 5F       	AND	$5F		; Convert to upper case
0337   0372 C9          	RET
0338   0373             
0339   0373             ;***************************************************************************
0340   0373             ;PRINT_NEW_LINE
0341   0373             ;Function: Prints carriage return and line feed
0342   0373             ;***************************************************************************
0343   0373 0D 0A FF    NEW_LINE_STRING: 	.BYTE "\r\n",EOS
0344   0376             
0345   0376             PRINT_NEW_LINE:
0346   0376 E5          	PUSH	HL
0347   0377 21 73 03    	LD	HL,NEW_LINE_STRING
0348   037A CD 5B 03    	CALL	PRINT_STRING
0349   037D E1          	POP	HL
0350   037E C9          	RET
0351   037F             
0352   037F             ;***************************************************************************
0353   037F             ;CHAR_ISHEX
0354   037F             ;Function: Checks if value in A is a hexadecimal digit, C flag set if true
0355   037F             ;***************************************************************************
0356   037F             CHAR_ISHEX:
0357   037F             			;Checks if Acc between '0' and 'F'
0358   037F FE 47       	CP	'F' + 1			;(Acc) > 'F'?
0359   0381 D0          	RET	NC			;Yes - Return / No - Continue
0360   0382 FE 30       	CP	'0'			;(Acc) < '0'?
0361   0384 D2 89 03    	JP	NC,CHAR_ISHEX_1		;Yes - Jump / No - Continue
0362   0387 3F          	CCF
0363   0388 C9          	RET
0364   0389             
0365   0389             CHAR_ISHEX_1:
0366   0389             		;Checks if Acc below '9' and above 'A'
0367   0389 FE 3A       	CP	'9' + 1			;(Acc) < '9' + 1?
0368   038B D8          	RET	C		;Yes - Return / No - Continue (meaning Acc between '0' and '9')
0369   038C FE 41       	CP	'A'			;(Acc) > 'A'?
0370   038E D2 93 03    	JP	NC,CHAR_ISHEX_2 	;Yes - Jump / No - Continue
0371   0391 3F          	CCF
0372   0392 C9          	RET
0373   0393             
0374   0393             CHAR_ISHEX_2:
0375   0393             	;Only gets here if Acc between 'A' and 'F'
0376   0393 37          	SCF	;Set carry flag to indicate the char is a hex digit
0377   0394 C9          	RET
0378   0395             
0379   0395             ;***************************************************************************
0380   0395             ;GET_HEX_NIBBLE
0381   0395             ;Function: Translates char to HEX nibble in bottom 4 bits of A
0382   0395             ;***************************************************************************
0383   0395             GET_HEX_NIB:
0384   0395 CD 5F 03    	CALL	GET_CHAR
0385   0398 CD 7F 03    	CALL	CHAR_ISHEX		;Is it a hex digit?
0386   039B D2 95 03    	JP	NC,GET_HEX_NIB		;Yes - Jump / No - Continue
0387   039E CD 66 03    	CALL	PRINT_CHAR
0388   03A1 FE 3A       	CP	'9' + 1			;Is it a digit less or equal '9' + 1?
0389   03A3 DA A8 03    	JP	C,GET_HEX_NIB_1		;Yes - Jump / No - Continue
0390   03A6 D6 07       	SUB	$07			;Adjust for A-F digits
0391   03A8             GET_HEX_NIB_1:
0392   03A8 D6 30       	SUB	'0'		;Subtract to get nib between 0->15
0393   03AA E6 0F       	AND	$0F		;Only return lower 4 bits
0394   03AC C9          	RET
0395   03AD             
0396   03AD             ;***************************************************************************
0397   03AD             ;GET_HEX_BYTE
0398   03AD             ;Function: Gets HEX byte into A
0399   03AD             ;***************************************************************************
0400   03AD             GET_HEX_BYTE:
0401   03AD CD 95 03    	CALL	GET_HEX_NIB	;Get high nibble
0402   03B0 CB 07       	RLC	A		;Rotate nibble into high nibble
0403   03B2 CB 07       	RLC	A
0404   03B4 CB 07       	RLC	A
0405   03B6 CB 07       	RLC	A
0406   03B8 47          	LD	B,A		;Save upper four bits
0407   03B9 CD 95 03    	CALL	GET_HEX_NIB	;Get lower nibble
0408   03BC B0          	OR	B		;Combine both nibbles
0409   03BD C9          	RET
0410   03BE             
0411   03BE             ;***************************************************************************
0412   03BE             ;GET_HEX_WORD
0413   03BE             ;Function: Gets two HEX bytes into HL
0414   03BE             ;***************************************************************************
0415   03BE             GET_HEX_WORD:
0416   03BE F5          	PUSH	AF
0417   03BF CD AD 03    	CALL	GET_HEX_BYTE		;Get high byte
0418   03C2 67          	LD	H,A
0419   03C3 CD AD 03    	CALL	GET_HEX_BYTE		;Get low byte
0420   03C6 6F          	LD	L,A
0421   03C7 F1          	POP	AF
0422   03C8 C9          	RET
0423   03C9             
0424   03C9             ;***************************************************************************
0425   03C9             ;PRINT_HEX_NIB
0426   03C9             ;Function: Prints a low nibble in hex notation from Acc to the serial line.
0427   03C9             ;***************************************************************************
0428   03C9             PRINT_HEX_NIB:
0429   03C9 F5          	PUSH 	AF
0430   03CA E6 0F       	AND	$0F			;Only low nibble in byte
0431   03CC C6 30       	ADD	A,'0'			;Adjust for char offset
0432   03CE FE 3A       	CP	'9' + 1			;Is the hex digit > 9?
0433   03D0 DA D5 03    	JP	C,PRINT_HEX_NIB_1	;Yes - Jump / No - Continue
0434   03D3 C6 07       	ADD	A,'A' - '0' - $0A	;Adjust for A-F
0435   03D5             PRINT_HEX_NIB_1:
0436   03D5 CD 66 03    	CALL	PRINT_CHAR	;Print the nibble
0437   03D8 F1          	POP	AF
0438   03D9 C9          	RET
0439   03DA             
0440   03DA             ;***************************************************************************
0441   03DA             ;PRINT_HEX_BYTE
0442   03DA             ;Function: Prints a byte in hex notation from Acc to the serial line.
0443   03DA             ;***************************************************************************
0444   03DA             PRINT_HEX_BYTE:
0445   03DA F5          	PUSH	AF	;Save registers
0446   03DB C5          	PUSH	BC
0447   03DC 47          	LD	B,A	;Save for low nibble
0448   03DD 0F          	RRCA		;Rotate high nibble into low nibble
0449   03DE 0F          	RRCA
0450   03DF 0F          	RRCA
0451   03E0 0F          	RRCA
0452   03E1 CD C9 03    	CALL	PRINT_HEX_NIB		;Print high nibble
0453   03E4 78          	LD	A,B			;Restore for low nibble
0454   03E5 CD C9 03    	CALL	PRINT_HEX_NIB		;Print low nibble
0455   03E8 C1          	POP	BC			;Restore registers
0456   03E9 F1          	POP	AF
0457   03EA C9          	RET
0458   03EB             
0459   03EB             ;***************************************************************************
0460   03EB             ;PRINT_HEX_WORD
0461   03EB             ;Function: Prints the four hex digits of a word to the serial line from HL
0462   03EB             ;***************************************************************************
0463   03EB             PRINT_HEX_WORD:
0464   03EB E5          	PUSH	HL
0465   03EC F5          	PUSH	AF
0466   03ED 7C          	LD	A,H
0467   03EE CD DA 03    	CALL	PRINT_HEX_BYTE		;Print high byte
0468   03F1 7D          	LD	A,L
0469   03F2 CD DA 03    	CALL	PRINT_HEX_BYTE		;Print low byte
0470   03F5 F1          	POP	AF
0471   03F6 E1          	POP	HL
0472   03F7 C9          	RET
0473   03F8             .END



Label        Value      Label        Value      Label        Value
------------------      ------------------      ------------------
CLEAR_SCREEN  010F      CHAR_ISHEX    037F      CHAR_ISHEX_1  0389      
CHAR_ISHEX_2  0393      EOS           00FF      GET_CHAR      035F      
GET_HEX_NIB   0395      GET_HEX_NIB_1 03A8      GET_HEX_BYTE  03AD      
GET_HEX_WORD  03BE      HELP_MSG_1    01FF      HELP_MSG_2    021C      
HELP_MSG_3    0234      HELP_MSG_4    0248      HELP_MSG_5    025B      
HELP_COMMAND  0289      INT_CATCH     0038      MAIN          0100      
MON_CLS       010D      MON_MSG       0119      MON_VER       0143      
MON_HLP       0158      MON_PROMPT    018B      MON_PROMPT_LOOP 018D      
MON_COMMAND   01A5      MDC_1         02AA      MDC_2         02C0      
MDC_3         02E2      MEMORY_DUMP_COMMAND 0319      MEMORY_DUMP_LINE 033B      
MEMORY_DUMP_BYTES 0346      NMI_CATCH     0066      NEW_LINE_STRING 0373      
PRINT_MON_HDR 0175      PRINT_STRING  035B      PRINT_CHAR    0366      
PRINT_NEW_LINE 0376      PRINT_HEX_NIB 03C9      PRINT_HEX_NIB_1 03D5      
PRINT_HEX_BYTE 03DA      PRINT_HEX_WORD 03EB      ROM_BOTTOM    0000      
ROM_TOP       07FF      RAM_BOTTOM    8000      RAM_TOP       FFFF      
RESET_COMMAND 0116      START         0000      TO_UPPER      036A      
UART0         0010      UART1         0011      UART2         0012      
UART3         0013      UART4         0014      UART5         0015      
UART6         0016      UART7         0017      UART_INIT     01BA      
UART_PRNT_STR 01CF      UART_PRNT_STR_LP 01D0      UART_END_PRNT_STR 01DD      
UART_TX_RDY   01DF      UART_TX_RDY_LP 01E0      UART_TX       01E9      
UART_RX_RDY   01EF      UART_RX_RDY_LP 01F0      UART_RX       01F9      


ADDR  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
-----------------------------------------------------
0000  F3 C3 00 01 00 00 00 00 00 00 00 00 00 00 00 00
0010  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0020  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0030  00 00 00 00 00 00 00 00 C3 38 00 00 00 00 00 00
0040  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0050  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0060  00 00 00 00 00 00 C3 66 00 00 00 00 00 00 00 00
0070  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0090  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00A0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00B0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00C0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00D0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00E0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00F0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0100  31 FF FF CD BA 01 CD 75 01 CD 8D 01 76 0C FF 21
0110  0D 01 CD 5B 03 C9 C3 00 00 0D 0A 5A 38 30 20 43
0120  6F 6D 70 75 74 65 72 09 09 32 30 31 39 20 4D 69
0130  63 68 61 65 6C 20 41 6E 64 65 72 73 6F 6E 0D 0A
0140  0D 0A FF 52 4F 4D 20 4D 6F 6E 69 74 6F 72 20 76
0150  30 2E 31 0D 0A 0D 0A FF 09 20 49 6E 70 75 74 20
0160  3F 20 66 6F 72 20 63 6F 6D 6D 61 6E 64 20 6C 69
0170  73 74 0D 0A FF CD 0F 01 21 19 01 CD 5B 03 21 43
0180  01 CD 5B 03 21 58 01 CD 5B 03 C9 3E FF 21 8B 01
0190  CD 5B 03 CD 5F 03 CD 66 03 CD 76 03 CD A5 01 CD
01A0  76 03 C3 8D 01 FE 3F CC 89 02 FE 44 CC 19 03 FE
01B0  43 CC 0F 01 FE 52 CC 16 01 C9 3E 80 D3 13 3E 20
01C0  D3 10 3E 00 D3 11 3E 03 D3 13 3E 01 D3 11 C9 F5
01D0  7E FE FF CA DD 01 CD E9 01 23 C3 D0 01 F1 C9 F5
01E0  DB 15 CB 6F CA E0 01 F1 C9 CD DF 01 D3 10 C9 F5
01F0  DB 15 CB 47 CA F0 01 F1 C9 CD EF 01 DB 10 C9 5A
0200  4D 43 38 30 20 4D 6F 6E 69 74 6F 72 20 43 6F 6D
0210  6D 61 6E 64 20 4C 69 73 74 0D 0A FF 3F 20 2D 20
0220  76 69 65 77 20 63 6F 6D 6D 61 6E 64 20 6C 69 73
0230  74 0D 0A FF 52 20 2D 20 6D 6F 6E 69 74 6F 72 20
0240  72 65 73 65 74 0D 0A FF 43 20 2D 20 63 6C 65 61
0250  72 20 73 63 72 65 65 6E 0D 0A FF 44 20 2D 20 70
0260  72 69 6E 74 20 24 38 30 20 62 79 74 65 73 20 66
0270  72 6F 6D 20 73 70 65 63 69 66 69 65 64 20 6C 6F
0280  63 61 74 69 6F 6E 0D 0A FF 21 FF 01 CD 5B 03 21
0290  1C 02 CD 5B 03 21 34 02 CD 5B 03 21 48 02 CD 5B
02A0  03 21 5B 02 CD 5B 03 3E FF C9 4D 65 6D 6F 72 79
02B0  20 44 75 6D 70 20 43 6F 6D 6D 61 6E 64 0D 0A FF
02C0  4C 6F 63 61 74 69 6F 6E 20 74 6F 20 73 74 61 72
02D0  74 20 69 6E 20 34 20 64 69 67 69 74 20 48 45 58
02E0  3A FF 20 20 20 20 20 30 30 20 30 31 20 30 32 20
02F0  30 33 20 30 34 20 30 35 20 30 36 20 30 37 20 30
0300  38 20 30 39 20 30 41 20 30 42 20 30 43 20 30 44
0310  20 30 45 20 30 46 0D 0A FF 21 AA 02 CD 5B 03 21
0320  C0 02 CD 5B 03 CD BE 03 E5 CD 76 03 CD 76 03 21
0330  E2 02 CD 5B 03 CD 76 03 E1 0E 0A 06 10 CD EB 03
0340  3E 20 CD 66 03 0D 7E CD DA 03 3E 20 CD 66 03 23
0350  10 F4 41 CD 76 03 10 E3 3E FF C9 CD CF 01 C9 CD
0360  F9 01 CD 6A 03 C9 CD E9 01 C9 FE 61 D8 FE 7B D0
0370  E6 5F C9 0D 0A FF E5 21 73 03 CD 5B 03 E1 C9 FE
0380  47 D0 FE 30 D2 89 03 3F C9 FE 3A D8 FE 41 D2 93
0390  03 3F C9 37 C9 CD 5F 03 CD 7F 03 D2 95 03 CD 66
03A0  03 FE 3A DA A8 03 D6 07 D6 30 E6 0F C9 CD 95 03
03B0  CB 07 CB 07 CB 07 CB 07 47 CD 95 03 B0 C9 F5 CD
03C0  AD 03 67 CD AD 03 6F F1 C9 F5 E6 0F C6 30 FE 3A
03D0  DA D5 03 C6 07 CD 66 03 F1 C9 F5 C5 47 0F 0F 0F
03E0  0F CD C9 03 78 CD C9 03 C1 F1 C9 E5 F5 7C CD DA
03F0  03 7D CD DA 03 F1 E1 C9 00 00 00 00 00 00 00 00


tasm: Number of errors = 0
